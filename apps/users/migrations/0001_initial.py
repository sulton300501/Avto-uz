# Generated by Django 5.1.6 on 2025-02-16 05:44

import apps.common.models.fields
import apps.common.utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import sorl.thumbnail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Kiritilgan sana')),
                ('updated_at', models.DateField(auto_now=True, verbose_name="o'zgartrilgan sana")),
                ('full_name', models.CharField(max_length=255)),
                ('full_name_uz', models.CharField(max_length=255, null=True)),
                ('full_name_ru', models.CharField(max_length=255, null=True)),
                ('profile_picture', sorl.thumbnail.fields.ImageField(upload_to=apps.common.utils.generate_upload_path, verbose_name='Foydlanuvchi rasmi')),
                ('profile_picture_uz', sorl.thumbnail.fields.ImageField(null=True, upload_to=apps.common.utils.generate_upload_path, verbose_name='Foydlanuvchi rasmi')),
                ('profile_picture_ru', sorl.thumbnail.fields.ImageField(null=True, upload_to=apps.common.utils.generate_upload_path, verbose_name='Foydlanuvchi rasmi')),
                ('phone_number', apps.common.models.fields.PhoneField(max_length=15, validators=[django.core.validators.RegexValidator(message='15-ta raqamga ruxsat berilgan. Standard raqam talab qilinadi', regex='^\\+?1?\\d{9,15}$')], verbose_name='Asosiy raqam')),
                ('phone_number_uz', apps.common.models.fields.PhoneField(max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='15-ta raqamga ruxsat berilgan. Standard raqam talab qilinadi', regex='^\\+?1?\\d{9,15}$')], verbose_name='Asosiy raqam')),
                ('phone_number_ru', apps.common.models.fields.PhoneField(max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='15-ta raqamga ruxsat berilgan. Standard raqam talab qilinadi', regex='^\\+?1?\\d{9,15}$')], verbose_name='Asosiy raqam')),
                ('is_dealer', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('region', models.CharField(max_length=255)),
                ('region_uz', models.CharField(max_length=255, null=True)),
                ('region_ru', models.CharField(max_length=255, null=True)),
                ('user_count_data', models.BigIntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
